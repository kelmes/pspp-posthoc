AT_BANNER([GRAPH])

AT_SETUP([GRAPH simple scatterplot])
AT_DATA([scatterplot.sps],[
* Simple Scatterplot test
NEW FILE.
INPUT PROGRAM.
LOOP #i = 1 to 100.
COMPUTE Age = RV.NORMAL(40,10).
END CASE.
END LOOP.
END FILE.
END INPUT PROGRAM.

COMPUTE Size = Age * 3 + 50.

GRAPH
    /SCATTERPLOT(BIVARIATE) = Age WITH Size. 

])

AT_CHECK([pspp -O format=csv scatterplot.sps], [0], [ignore])

AT_CLEANUP


AT_SETUP([GRAPH Scatter and Histogram])
AT_DATA([scatterlong.sps],[
NEW FILE.
INPUT PROGRAM.
LOOP #i = 1 to 10000.
COMPUTE Age = RV.NORMAL(40,10).
COMPUTE CityNum = TRUNC(UNIFORM(2.95)).
END CASE.
END LOOP.
END FILE.
END INPUT PROGRAM.

COMPUTE Size = Age * 3 + 50 + 50*CityNum.

STRING City (a20).

Recode CityNum 
       (0 = "Madrid")
       (1 = "Paris")
       (ELSE = "Stockholm")
       into City.

 GRAPH
    /SCATTERPLOT(BIVARIATE) = Age WITH Size 

 GRAPH
    /SCATTERPLOT(BIVARIATE) = Age WITH CityNum
 
 GRAPH
    /SCATTERPLOT = CityNum WITH Age

 GRAPH
    /SCATTERPLOT = CityNum WITH Size

 GRAPH
    /SCATTERPLOT(BIVARIATE) = Age WITH Size BY City

 GRAPH
    /SCATTERPLOT(BIVARIATE) = Age WITH Size BY CityNum

 ADD VALUE LABELS 
    /CityNum 1 'Rio' 2 'Tokyo' 0 'Mumbai'.

 GRAPH
    /SCATTERPLOT(BIVARIATE) = Age WITH Size BY CityNum

 GRAPH
    /HISTOGRAM = Age.

])

AT_CHECK([pspp -O format=pdf scatterlong.sps], [0], [ignore])
AT_CLEANUP

AT_SETUP([GRAPH missing values don't crash])
AT_DATA([scatter.sps], [dnl
data list list /x * y *.
begin data.
1 0
2 0
. 0
3 1
4 1
5 .
6 1
end data.
graph 
      /scatterplot = x with y.
graph
      /histogram = x. 
])
AT_CHECK([pspp -o pspp.pdf scatter.sps])
dnl Ignore output -- this is just a no-crash check.
AT_CLEANUP

AT_SETUP([GRAPH missing=VARIABLE no crash])
AT_DATA([scatter.sps], [dnl
data list list /x * y *.
begin data.
1 0
2 0
. 0
3 1
4 1
5 .
6 1
end data.
graph 
      /scatterplot = x with y
      /missing = VARIABLE.
graph
      /histogram = x
      /missing = VARIABLE.
])
AT_CHECK([pspp -o pspp.pdf scatter.sps])
dnl Ignore output -- this is just a no-crash check.
AT_CLEANUP

AT_SETUP([GRAPH missing value in by variable])
AT_DATA([scatter.sps], [dnl
data list list /x * y * z *.
begin data.
1 0 9
2 0 9
. 0 9
3 1 .
4 1 8
5 . 8
6 1 8
end data.
graph 
      /scatterplot = x with y by z
      /missing = VARIABLE.

graph 
      /scatterplot = x with y by z.

])
AT_CHECK([pspp -o pspp.pdf scatter.sps])
dnl Ignore output -- this is just a no-crash check.
AT_CLEANUP


AT_SETUP([GRAPH histogram with null data])
AT_DATA([null-hist.sps], [dnl
data list list /x *.
begin data.
1109 
. 
end data.

graph 
      /histogram = x.

])

AT_CHECK([pspp -o pspp.pdf null-hist.sps], [0], [ignore])
dnl Ignore output -- this is just a no-crash check.
AT_CLEANUP


AT_SETUP([GRAPH histogram all missing])
AT_DATA([null-hist.sps], [dnl
data list list /x *.
begin data.
. 
end data.

graph 
      /histogram = x.

])

AT_CHECK([pspp null-hist.sps], [0], [ignore])
dnl Ignore output -- this is just a no-crash check.
AT_CLEANUP




AT_SETUP([GRAPH barcharts])
AT_CHECK([ln -s $top_srcdir/examples/physiology.sav .], [0])
AT_CHECK([ln -s $top_srcdir/examples/repairs.sav .], [0])

AT_DATA([barchart.sps], [dnl
GET FILE="physiology.sav".

GRAPH /BAR = COUNT BY SEX.

GRAPH /BAR = MEAN(height) BY SEX.

NEW FILE.

GET FILE="repairs.sav".

GRAPH /BAR = MEAN (mtbf) BY factory.

COMPUTE  R = TRUNC(RV.UNIFORM(1,5)).

GRAPH /BAR = MEAN (mtbf) BY factory BY R.
])

AT_CHECK([pspp -o pspp.pdf barchart.sps], [0], [ignore])
dnl Ignore output -- this is just a no-crash check.

AT_CLEANUP



AT_SETUP([GRAPH barchart arity])

AT_DATA([barchart.sps], [dnl
data list notable list /x y z*.
begin data
1  1  3
2  1  4
3  1  3
4  1  4
5  .  3
6  2  4
7  2  3
8  2  4
9  2  3
10  2  4
end data.

* This line is invalid
GRAPH /BAR = COUNT(x) BY y.
])

AT_CHECK([pspp -o pspp.pdf barchart.sps], [1], [ignore])
dnl Ignore output -- this is just a no-crash check.

AT_CLEANUP




AT_SETUP([GRAPH barchart bad syntax])

AT_DATA([barchart.sps], [dnl
data list notable list /x y z*.
begin data
1  1  3
2  1  4
3  1  3
4  1  4
5  .  3
6  2  4
7  2  3
8  2  4
9  2  3
10  2  4
end data.

* This line is invalid
GRAPH /BAR = SCROD BY y.
])

AT_CHECK([pspp -o pspp.pdf barchart.sps], [1], [ignore])
dnl Ignore output -- this is just a no-crash check.

AT_CLEANUP



AT_SETUP([GRAPH barchart full])

AT_DATA([barchart.sps], [dnl
data list notable list /x y z*.
begin data
1  1  3
2  1  4
3  1  3
4  1  4
5  .  3
6  2  4
7  2  3
8  2  4
9  2  3
10  2  4
end data.

* This line is invalid
GRAPH /BAR = COUNT by z.
GRAPH /BAR = CUFREQ by z.
GRAPH /BAR = PCT by z.
GRAPH /BAR = CUPCT by z.

GRAPH /BAR = MEAN(y) BY z.
GRAPH /BAR = SUM(y) BY z.
GRAPH /BAR = MAXIMUM(y) BY z.
GRAPH /BAR = MINIMUM(y) BY z.

GRAPH /BAR = MEAN(y) BY z BY y.
GRAPH /BAR = SUM(y) BY z BY y.
GRAPH /BAR = MAXIMUM(y) BY z BY y.
GRAPH /BAR = MINIMUM(y) BY z BY y.
])

AT_CHECK([pspp -o pspp.pdf barchart.sps], [0], [ignore])
dnl Ignore output -- this is just a no-crash check.

AT_CLEANUP





AT_SETUP([GRAPH buggy syntax])

AT_DATA([barchart.sps], [dnl
data list notable list /x y z*.
begin data
1  1  3
2  1  4
10  2  4
end data.

GRAPH /BAR = MINIMUM({) BY z BY y.
])

AT_CHECK([pspp -o pspp.pdf barchart.sps], [1], [ignore])
dnl Ignore output -- this is just a no-crash check.

AT_CLEANUP